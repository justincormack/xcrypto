diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index f60bea15c8..f77e74f59c 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -401,6 +401,7 @@ enum reg_class
 {
   RCLASS_GPR,
   RCLASS_FPR,
+  RCLASS_CPR,   // SCARV Crypto ISE extension registers
   RCLASS_CSR,
   RCLASS_MAX
 };
@@ -448,6 +449,7 @@ reg_lookup (char **s, enum reg_class class, unsigned int *regnop)
   char save_c;
   int reg = -1;
 
+
   /* Find end of name.  */
   e = *s;
   if (is_name_beginner (*e))
@@ -458,7 +460,7 @@ reg_lookup (char **s, enum reg_class class, unsigned int *regnop)
   /* Terminate name.  */
   save_c = *e;
   *e = '\0';
-
+  
   /* Look for the register.  Advance to next token if one was recognized.  */
   if ((reg = reg_lookup_internal (*s, class)) >= 0)
     *s = e;
@@ -505,10 +507,59 @@ validate_riscv_insn (const struct riscv_opcode *opc)
       return FALSE;
     }
 
+// Used by Crypto ISE to eat arg specifier and argument strings as we
+// assemble each token.
+#define EAT_ARG_TOKENS while(*s != ',' && *s != '\0'){s++;} \
+                       while(*args != ',' && *args != '\0'){args++;} \
+                       if(*s != '\0')s++;  \
+                       if(*args == '\0') args --;
+
 #define USE_BITS(mask,shift)	(used_bits |= ((insn_t)(mask) << (shift)))
   while (*p)
     switch (c = *p++)
       {
+// ----- Crypto ISE BEGIN -----
+case 'X':
+  switch (c = *p++){
+    case 'w': used_bits |= ENCODE_X_B0(-1U) ;break;/* b0 */
+    case 'x': used_bits |= ENCODE_X_B1(-1U) ;break;/* b1 */
+    case 'y': used_bits |= ENCODE_X_B2(-1U) ;break;/* b2 */
+    case 'z': used_bits |= ENCODE_X_B3(-1U) ;break;/* b3 */
+    case 'p': used_bits |= ENCODE_X_CA(-1U) ;      /* ca */
+              used_bits |= ENCODE_X_CB(-1U) ;      /* cb */
+              used_bits |= ENCODE_X_CC(-1U) ;      /* cc */
+              break;
+    case 'a': used_bits |= ENCODE_X_CA(-1U) ;break;/* ca */
+    case 'b': used_bits |= ENCODE_X_CB(-1U) ;break;/* cb */
+    case 'c': used_bits |= ENCODE_X_CC(-1U) ;break;/* cc */
+    case 'd': used_bits |= ENCODE_X_CD(-1U) ;break;/* cd */
+    case 'L': used_bits |= ENCODE_X_CL(-1U) ;break;/* cl */
+    case 'r': used_bits |= ENCODE_X_CMSHAMT(-1U) ;break;/* cmshamt */
+    case 'D': used_bits |= ENCODE_X_CRD(-1U) ;break;/* crd */
+    case 'M': used_bits |= ENCODE_X_CRDM(-1U) ;break;/* crdm */
+    case 's': used_bits |= ENCODE_X_CRS1(-1U) ;break;/* crs1 */
+    case 't': used_bits |= ENCODE_X_CRS2(-1U) ;break;/* crs2 */
+    case 'S': used_bits |= ENCODE_X_CRS3(-1U) ;break;/* crs3 */
+    case 'k': used_bits |= ENCODE_X_CS(-1U) ;break;/* cs */
+    case 'R': used_bits |= ENCODE_X_CSHAMT(-1U) ;break;/* cshamt */
+    case 'h': used_bits |= ENCODE_X_CC(-1U) ;break;/* halfword specifier */
+    case 'B': used_bits |= ENCODE_X_CA(-1U) ;break;/* byte-in-halfword specifier (stores) */
+    case 'l': used_bits |= ENCODE_X_IMM11(-1U) ;break;/* imm11 */
+    case 'm': used_bits |= ENCODE_X_IMM11HI(-1U) ;      /* imm11hi */
+              used_bits |= ENCODE_X_IMM11LO(-1U) ;break;/* imm11lo */
+    case 'n': used_bits |= ENCODE_X_IMM11LO(-1U) ;break;/* imm11lo */
+    case '5': used_bits |= ENCODE_X_IMM11(-1U)       ;/* imm11*/
+              used_bits |= ENCODE_X_IMM5(-1U) ;break;/* imm5 */
+    case '4': used_bits |= ENCODE_X_LUT4(-1U) ;break;/* lut4 */
+    case '8': used_bits |= ENCODE_X_LUT8(-1U) ;break;/* lut8 */
+
+    default:
+    as_bad (_("internal: bad RISC-V Crypto opcode (unknown operand type `X%c'): %s %s"),
+    c, opc->name, opc->args);
+return FALSE;
+   }
+   break;
+// ----- Crypto ISE END -------
       case 'C': /* RVC */
 	switch (c = *p++)
 	  {
@@ -641,6 +692,7 @@ md_begin (void)
   hash_reg_names (RCLASS_GPR, riscv_gpr_names_abi, NGPR);
   hash_reg_names (RCLASS_FPR, riscv_fpr_names_numeric, NFPR);
   hash_reg_names (RCLASS_FPR, riscv_fpr_names_abi, NFPR);
+  hash_reg_names (RCLASS_CPR, riscv_cpr_names_numeric, NCPR);
 
 #define DECLARE_CSR(name, num) hash_reg_name (RCLASS_CSR, #name, num);
 #define DECLARE_CSR_ALIAS(name, num) DECLARE_CSR(name, num);
@@ -1218,10 +1270,14 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
   struct riscv_opcode *insn;
   char *argsStart;
   unsigned int regno;
+  unsigned int regno2;
   char save_c = 0;
   int argnum;
   const struct percent_op_match *p;
   const char *error = "unrecognized opcode";
+  char packwidth = 0xFF;
+
+  int crypto_i;
 
   /* Parse the name of the instruction.  Terminate the string if whitespace
      is found so that hash_find only sees the name part of the string.  */
@@ -1267,6 +1323,313 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
 	      error = NULL;
 	      goto out;
 
+// ----- Crypto ISE BEGIN -----
+case 'X': /* SCARV Crypto ISE */ 
+  switch (c = *++args){
+    case 'w': /* b0 */
+    case 'x': /* b1 */
+    case 'y': /* b2 */
+    case 'z': /* b3 */
+        crypto_i = (s[0] - 48) & 0xf;
+        if(crypto_i >= 0 && crypto_i <= 3){
+            if(c == 'w') INSERT_OPERAND(XB0,*ip, crypto_i);
+            if(c == 'x') INSERT_OPERAND(XB1,*ip, crypto_i);
+            if(c == 'y') INSERT_OPERAND(XB2,*ip, crypto_i);
+            if(c == 'z') INSERT_OPERAND(XB3,*ip, crypto_i);
+            EAT_ARG_TOKENS;
+        } else {
+            as_bad (_("Crypto ISE: Bad twiddle source. Should be {0,1,2,3} but got '%d')\n"),crypto_i);
+            break;
+        }
+        continue;
+    case 'p': /* pack width */
+        packwidth = s[0];
+        if(s[0] == 'w'){ /* Pack word */
+            INSERT_OPERAND(XCA,*ip, 0);
+            INSERT_OPERAND(XCB,*ip, 0);
+            INSERT_OPERAND(XCC,*ip, 0);
+        }
+        else if(s[0] == 'h'){ /* Pack halfwords */
+            INSERT_OPERAND(XCA,*ip, 0);
+            INSERT_OPERAND(XCB,*ip, 0);
+            INSERT_OPERAND(XCC,*ip, 1);
+        }
+        else if(s[0] == 'b'){ /* Pack bytes */
+            INSERT_OPERAND(XCA,*ip, 0);
+            INSERT_OPERAND(XCB,*ip, 1);
+            INSERT_OPERAND(XCC,*ip, 0);
+        }
+        else if(s[0] == 'n'){ /* Pack nibbles */
+            INSERT_OPERAND(XCA,*ip, 0);
+            INSERT_OPERAND(XCB,*ip, 1);
+            INSERT_OPERAND(XCC,*ip, 1);
+        }
+        else if(s[0] == 'c'){ /* Pack crumbs */
+            INSERT_OPERAND(XCA,*ip, 1);
+            INSERT_OPERAND(XCB,*ip, 0);
+            INSERT_OPERAND(XCC,*ip, 0);
+        }
+        else {
+            as_bad(_("Crypto ISE: Bad pack width specifier. Should be {w,h,b,n,c}. Got %c\n"),s[0]);
+            break;
+        }
+        EAT_ARG_TOKENS;
+        continue;
+    case 'L': /* cl - Insert / Extract Length*/
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        if ((unsigned long) imm_expr->X_add_number > 32) {
+          as_bad (_("Crypto ISE Improper bitfield length length (%lu). Should be 0 <= x <= 32."),
+          (unsigned long) imm_expr->X_add_number);
+          break;
+        } else if ((unsigned long) imm_expr->X_add_number & 0x1) {
+          as_bad (_("Crypto ISE Improper bitfield length (%lu). Should be a multiple of 2."),
+          (unsigned long) imm_expr->X_add_number);
+          break;
+        }
+        INSERT_OPERAND (XCL, *ip, imm_expr->X_add_number >> 1);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+      break;
+    case 'r': /* cmshamt */
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        if ((unsigned long) imm_expr->X_add_number >= 64) {
+          as_bad (_("Crypto ISE Improper multi-precision shift (%lu). Should be 0 <= x < 64"),
+          (unsigned long) imm_expr->X_add_number);
+          break;
+        }
+        INSERT_OPERAND (XCMSHAMT, *ip, imm_expr->X_add_number);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+    case 'D': /* crd */
+        if(reg_lookup(&s,RCLASS_CPR,&regno)){
+            INSERT_OPERAND(XCRD,*ip,regno);
+            EAT_ARG_TOKENS;
+            continue;
+        } else {
+            as_bad(_("Couldn't identify crypto destination register: '%s'"),s);
+            break;
+        }
+    case 'M': /* crdm */
+        /* CRDM takes a *pair* of explicitly specified adjacent registers */
+        if(!reg_lookup(&s,RCLASS_CPR,&regno)) {
+            as_bad(_("Couldn't identify crypto multi-destination register: '%s'"),str);
+        }
+        
+        s++;
+
+        if(reg_lookup(&s,RCLASS_CPR,&regno2)){
+            if((regno | 0x1) == regno2 &&
+                regno != regno2) {
+                INSERT_OPERAND(XCRDM,*ip,regno>>1);
+                EAT_ARG_TOKENS;
+                continue;
+            }
+            else {
+                as_bad(_("Bad crypto multi-destination register pair: '%s'"),str);
+            }
+        } else {
+            as_bad(_("Couldn't identify crypto multi-destination register: '%s'"),str);
+            break;
+        }
+      break;
+    case 's': /* crs1 */
+        if(reg_lookup(&s,RCLASS_CPR,&regno)){
+            INSERT_OPERAND(XCRS1,*ip,regno);
+            EAT_ARG_TOKENS;
+            continue;
+        } else {
+            as_bad(_("Couldn't identify crypto source register 1: '%s'"),s);
+            break;
+        }
+    case 't': /* crs2 */
+        if(reg_lookup(&s,RCLASS_CPR,&regno)){
+            INSERT_OPERAND(XCRS2,*ip,regno);
+            EAT_ARG_TOKENS;
+            continue;
+        } else {
+            as_bad(_("Couldn't identify crypto source register 2: '%s'"),s);
+            break;
+        }
+    case 'S': /* crs3 */
+        if(reg_lookup(&s,RCLASS_CPR,&regno)){
+            INSERT_OPERAND(XCRS3,*ip,regno);
+            EAT_ARG_TOKENS;
+            continue;
+        } else {
+            as_bad(_("Couldn't identify crypto source register 3: '%s'"),s);
+            break;
+        }
+      break;
+    case 'k': /* cs - Insert / Extract start */
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        if ((unsigned long) imm_expr->X_add_number >= 30) {
+          as_bad (_("Crypto ISE Improper insert/extract start (%lu). Should be 0 <= x <= 30."),
+          (unsigned long) imm_expr->X_add_number);
+          break;
+        } else if ((unsigned long) imm_expr->X_add_number & 0x1) {
+          as_bad (_("Crypto ISE Improper bitfield start (%lu). Should be a multiple of 2."),
+          (unsigned long) imm_expr->X_add_number);
+          break;
+        }
+        INSERT_OPERAND (XCS, *ip, imm_expr->X_add_number >> 1);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+      break;
+    case 'R': /* cshamt */
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+
+        if(packwidth == 'w') {
+            
+            // ca field used to store MSB of pack width when operating
+            // on whole word.
+            if ((unsigned long) imm_expr->X_add_number > 31) {
+              as_bad (_("Crypto ISE Improper shift/rotate amount (%lu). "
+                        "Packwidth = '%c' implies shift/rotate amount "
+                        "0 <= x <= 31"),
+              (unsigned long) imm_expr->X_add_number,
+              packwidth);
+              break;
+            }
+            INSERT_OPERAND(XCSHAMT, *ip, (imm_expr->X_add_number >> 0) & 0xF);
+            INSERT_OPERAND(XCA    , *ip, (imm_expr->X_add_number >> 4) & 0x1);
+
+        } else {
+            
+            // pack width less than one word, so use only 4-bit cshamt field
+            if ((unsigned long) imm_expr->X_add_number > 15) {
+              as_bad (_("Crypto ISE Improper shift/rotate amount (%lu). "
+                        "Packwidth = '%c' implies shift/rotate amount "
+                        "0 <= x <= 15"),
+              (unsigned long) imm_expr->X_add_number,
+              packwidth);
+              break;
+            }
+            INSERT_OPERAND (XCSHAMT, *ip, imm_expr->X_add_number);
+
+        }
+
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+    case 'h': /* Halfword specifier */
+        if(s[0] == '0'){
+            INSERT_OPERAND(XCC, *ip, 0);
+        } else if (s[0] == '1') {
+            INSERT_OPERAND(XCC, *ip, 1);
+        } else {
+          as_bad (_("Crypto ISE Improper halfword specifieer (%c). Should be 0 (low) or 1 (high)."),
+            s[0]);
+          break;
+        }
+        EAT_ARG_TOKENS;
+        continue;
+    case 'B': /* Byte of halfword specifier for stores*/
+        if(s[0] == '0'){
+            INSERT_OPERAND(XCA, *ip, 0);
+        } else if (s[0] == '1') {
+            INSERT_OPERAND(XCA, *ip, 1);
+        } else {
+          as_bad (_("Crypto ISE Improper byte-of-halfword specifieer (%c). Should be 0 (low) or 1 (high)."),
+            s[0]);
+          break;
+        }
+        EAT_ARG_TOKENS;
+        continue;
+    case 'd': /* Byte of halfword specifier for loads */
+        if(s[0] == '0'){
+            INSERT_OPERAND(XCD, *ip, 0);
+        } else if (s[0] == '1') {
+            INSERT_OPERAND(XCD, *ip, 1);
+        } else {
+          as_bad (_("Crypto ISE Improper byte-of-halfword specifieer (%c). Should be 0 (low) or 1 (high)."),
+            s[0]);
+          break;
+        }
+        EAT_ARG_TOKENS;
+        continue;
+    case 'l': /* imm11 */
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        //if ((unsigned long) imm_expr->X_add_number > 1023) {
+        //  as_bad (_("Crypto ISE Improper 11 bit immediate offset (%lu). Should be 0 <= x <= (%i)"),
+        //  (unsigned long) imm_expr->X_add_number,1023);
+        //  break;
+        //}
+        INSERT_OPERAND (XIMM11, *ip, imm_expr->X_add_number);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+    case 'm': /* imm11hi */
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        //if ((unsigned long) imm_expr->X_add_number > 1023) {
+        //  as_bad (_("Crypto ISE Improper 11 bit immediate offset (%lu). Should be 0 <= x <= (%i)"),
+        //  (unsigned long) imm_expr->X_add_number,1023);
+        //  break;
+        //}
+        INSERT_OPERAND (XIMM11HI, *ip, imm_expr->X_add_number>>4);
+        INSERT_OPERAND (XIMM11LO, *ip, imm_expr->X_add_number & 0xF);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+    case 'n': /* imm11lo */
+      as_bad (_("Crypto ISE - We should never reach this line! %c"),'n');
+      break;
+    case '5': /* imm5 */
+        // 16 bit immediate split across imm11 and imm5 opcode fields.
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        if ((unsigned long) imm_expr->X_add_number > 65535) {
+          as_bad (_("Crypto ISE Improper 16 bit immediate offset (%lu). Should be 0 <= x <= (%i)"),
+          (unsigned long) imm_expr->X_add_number,65535);
+          break;
+        }
+        INSERT_OPERAND (XIMM11, *ip, (imm_expr->X_add_number>>5) & 0x7FF);
+        INSERT_OPERAND (XIMM5, *ip, imm_expr->X_add_number & 0x1f);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+      break;
+    case '4': /* lut4 */
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        if ((unsigned long) imm_expr->X_add_number > 15) {
+          as_bad (_("Crypto ISE Improper 4-bit immediate (%lu). Should be 0 <= x <= 15"),
+          (unsigned long) imm_expr->X_add_number);
+          break;
+        }
+        INSERT_OPERAND (XLUT4, *ip, imm_expr->X_add_number);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+    case '8': /* lut8 */
+        my_getExpression (imm_expr, s);
+        check_absolute_expr (ip, imm_expr);
+        if ((unsigned long) imm_expr->X_add_number > 255) {
+          as_bad (_("Crypto ISE Improper 8-bit immediate (%lu). Should be 0 <= x <= 255"),
+          (unsigned long) imm_expr->X_add_number);
+          break;
+        }
+        INSERT_OPERAND (XLUT8, *ip, imm_expr->X_add_number);
+        imm_expr->X_op = O_absent;
+        s = expr_end;
+        continue;
+
+    default:
+        as_bad (_("bad Crypto ISE field specifier 'X%c'"), *args);
+        break;
+    
+}
+break;
+// ----- Crypto ISE END -------
+
 	    case 'C': /* RVC */
 	      switch (*++args)
 		{
@@ -1562,6 +1925,7 @@ rvc_lui:
 	    case 't':		/* Target register.  */
 	      if (reg_lookup (&s, RCLASS_GPR, &regno))
 		{
+
 		  c = *args;
 		  if (*s == ' ')
 		    ++s;
diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index f966fb6a50..fc47e56468 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -1,6 +1,148 @@
 /* Automatically generated by parse-opcodes.  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// ----- Crypto ISE BEGIN -----
+#define MATCH_XCR2GPR 0x2b
+#define MASK_XCR2GPR  0xfff8707f
+#define MATCH_GPR2XCR 0x100002b
+#define MASK_GPR2XCR  0xfff0787f
+#define MATCH_PADD 0x200002b
+#define MASK_PADD  0xfe00707f
+#define MATCH_PSUB 0x400002b
+#define MASK_PSUB  0xfe00707f
+#define MATCH_PMUL_L 0x600002b
+#define MASK_PMUL_L  0xfe00707f
+#define MATCH_PMUL_H 0x800002b
+#define MASK_PMUL_H  0xfe00707f
+#define MATCH_PCLMUL_L 0xe600002b
+#define MASK_PCLMUL_L  0xfe00707f
+#define MATCH_PCLMUL_H 0xe800002b
+#define MASK_PCLMUL_H  0xfe00707f
+#define MATCH_PSLL 0xa00002b
+#define MASK_PSLL  0xfe00707f
+#define MATCH_PSRL 0xc00002b
+#define MASK_PSRL  0xfe00707f
+#define MATCH_PROT 0xe00002b
+#define MASK_PROT  0xfe00707f
+#define MATCH_PSLL_I 0x1000002b
+#define MASK_PSLL_I  0xfe00707f
+#define MATCH_PSRL_I 0x1200002b
+#define MASK_PSRL_I  0xfe00707f
+#define MATCH_PROT_I 0x1400002b
+#define MASK_PROT_I  0xfe00707f
+#define MATCH_RNGSEED 0x1600002b
+#define MASK_RNGSEED  0xfff87fff
+#define MATCH_RNGSAMP 0x1610002b
+#define MASK_RNGSAMP  0xfffff87f
+#define MATCH_RNGTEST 0x1620002b
+#define MASK_RNGTEST  0xfffff07f
+#define MATCH_CMOV_T 0x1a00002b
+#define MASK_CMOV_T  0xff08787f
+#define MATCH_CMOV_F 0x1c00002b
+#define MASK_CMOV_F  0xff08787f
+#define MATCH_SHA3_XY 0x3000002b
+#define MASK_SHA3_XY  0x3e00707f
+#define MATCH_SHA3_X1 0x3200002b
+#define MASK_SHA3_X1  0x3e00707f
+#define MATCH_SHA3_X2 0x3400002b
+#define MASK_SHA3_X2  0x3e00707f
+#define MATCH_SHA3_X4 0x3800002b
+#define MASK_SHA3_X4  0x3e00707f
+#define MATCH_SHA3_YX 0x3600002b
+#define MASK_SHA3_YX  0x3e00707f
+#define MATCH_AESSUB_ENC 0x2000002b
+#define MASK_AESSUB_ENC  0xff08787f
+#define MATCH_AESSUB_ENCROT 0x2008002b
+#define MASK_AESSUB_ENCROT  0xff08787f
+#define MATCH_AESSUB_DEC 0x2100002b
+#define MASK_AESSUB_DEC  0xff08787f
+#define MATCH_AESSUB_DECROT 0x2108002b
+#define MASK_AESSUB_DECROT  0xff08787f
+#define MATCH_AESMIX_ENC 0x2200002b
+#define MASK_AESMIX_ENC  0xff08787f
+#define MATCH_AESMIX_DEC 0x2300002b
+#define MASK_AESMIX_DEC  0xff08787f
+#define MATCH_SCATTER_B 0x2400002b
+#define MASK_SCATTER_B  0xff00787f
+#define MATCH_GATHER_B 0x2600002b
+#define MASK_GATHER_B  0xff00787f
+#define MATCH_SCATTER_H 0x2c00002b
+#define MASK_SCATTER_H  0xff00787f
+#define MATCH_GATHER_H 0x2e00002b
+#define MASK_GATHER_H  0xff00787f
+#define MATCH_MIX_L 0x8000002b
+#define MASK_MIX_L  0xe108787f
+#define MATCH_MIX_H 0xa000002b
+#define MASK_MIX_H  0xe108787f
+#define MATCH_BOP 0x682b
+#define MASK_BOP  0x8787f
+#define MATCH_MEQU 0x702b
+#define MASK_MEQU  0xf000707f
+#define MATCH_MLTE 0x1000702b
+#define MASK_MLTE  0xf000707f
+#define MATCH_MGTE 0x2000702b
+#define MASK_MGTE  0xf000707f
+#define MATCH_LUT 0x3008702b
+#define MASK_LUT  0xf008787f
+#define MATCH_MADD_3 0x4000702b
+#define MASK_MADD_3  0xf0087c7f
+#define MATCH_MSUB_3 0x6000702b
+#define MASK_MSUB_3  0xf0087c7f
+#define MATCH_MADD_2 0x5000702b
+#define MASK_MADD_2  0xff087c7f
+#define MATCH_MSUB_2 0x5100702b
+#define MASK_MSUB_2  0xff087c7f
+#define MATCH_MACC_2 0x5200702b
+#define MASK_MACC_2  0xff087c7f
+#define MATCH_MACC_1 0x5f00702b
+#define MASK_MACC_1  0xfff87c7f
+#define MATCH_MSLL 0x7000782b
+#define MASK_MSLL  0xf0087c7f
+#define MATCH_MSRL 0x8000782b
+#define MASK_MSRL  0xf0087c7f
+#define MATCH_MMUL_3 0x9000782b
+#define MASK_MMUL_3  0xf0087c7f
+#define MATCH_MCLMUL_3 0xa000782b
+#define MASK_MCLMUL_3  0xf0087c7f
+#define MATCH_MSLL_I 0xc000742b
+#define MASK_MSLL_I  0xc0087c7f
+#define MATCH_MSRL_I 0x8000742b
+#define MASK_MSRL_I  0xc0087c7f
+#define MATCH_LD_BU 0x102b
+#define MASK_LD_BU  0x707f
+#define MATCH_LD_HU 0x202b
+#define MASK_LD_HU  0x10707f
+#define MATCH_LD_W 0x302b
+#define MASK_LD_W  0x10787f
+#define MATCH_LD_HIU 0x10302b
+#define MASK_LD_HIU  0x10787f
+#define MATCH_LD_LIU 0x10382b
+#define MASK_LD_LIU  0x10787f
+#define MATCH_PPERM_W 0x10282b
+#define MASK_PPERM_W  0xf8787f
+#define MATCH_PPERM_H0 0x50282b
+#define MASK_PPERM_H0  0xf8787f
+#define MATCH_PPERM_H1 0x70282b
+#define MASK_PPERM_H1  0xf8787f
+#define MATCH_PPERM_B0 0x90282b
+#define MASK_PPERM_B0  0xf8787f
+#define MATCH_PPERM_B1 0xb0282b
+#define MASK_PPERM_B1  0xf8787f
+#define MATCH_PPERM_B2 0xd0282b
+#define MASK_PPERM_B2  0xf8787f
+#define MATCH_PPERM_B3 0xf0282b
+#define MASK_PPERM_B3  0xf8787f
+#define MATCH_INS 0x18282b
+#define MASK_INS  0xf8787f
+#define MATCH_EXT 0x38282b
+#define MASK_EXT  0xf8787f
+#define MATCH_ST_B 0x402b
+#define MASK_ST_B  0x707f
+#define MATCH_ST_H 0x502b
+#define MASK_ST_H  0x100707f
+#define MATCH_ST_W 0x602b
+#define MASK_ST_W  0x100787f
+// ----- Crypto ISE END -------
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
diff --git a/include/opcode/riscv.h b/include/opcode/riscv.h
index b87c719626..e00b5d4719 100644
--- a/include/opcode/riscv.h
+++ b/include/opcode/riscv.h
@@ -191,6 +191,126 @@ static const char * const riscv_pred_succ[16] =
 #define RISCV_BRANCH_ALIGN (1 << RISCV_BRANCH_ALIGN_BITS)
 #define RISCV_BRANCH_REACH (RISCV_IMM_REACH * RISCV_BRANCH_ALIGN)
 
+// ----- Crypto ISE BEGIN -----
+#define ENCODE_X_B0(X)  ((X &  OP_MASK_XB0) << OP_SH_XB0)
+#define ENCODE_X_B1(X)  ((X &  OP_MASK_XB1) << OP_SH_XB1)
+#define ENCODE_X_B2(X)  ((X &  OP_MASK_XB2) << OP_SH_XB2)
+#define ENCODE_X_B3(X)  ((X &  OP_MASK_XB3) << OP_SH_XB3)
+#define ENCODE_X_CA(X)  ((X &  OP_MASK_XCA) << OP_SH_XCA)
+#define ENCODE_X_CB(X)  ((X &  OP_MASK_XCB) << OP_SH_XCB)
+#define ENCODE_X_CC(X)  ((X &  OP_MASK_XCC) << OP_SH_XCC)
+#define ENCODE_X_CD(X)  ((X &  OP_MASK_XCD) << OP_SH_XCD)
+#define ENCODE_X_CL(X)  ((X &  OP_MASK_XCL) << OP_SH_XCL)
+#define ENCODE_X_CMSHAMT(X)  ((X &  OP_MASK_XCMSHAMT) << OP_SH_XCMSHAMT)
+#define ENCODE_X_CRD(X)  ((X &  OP_MASK_XCRD) << OP_SH_XCRD)
+#define ENCODE_X_CRDM(X)  ((X &  OP_MASK_XCRDM) << OP_SH_XCRDM)
+#define ENCODE_X_CRS1(X)  ((X &  OP_MASK_XCRS1) << OP_SH_XCRS1)
+#define ENCODE_X_CRS2(X)  ((X &  OP_MASK_XCRS2) << OP_SH_XCRS2)
+#define ENCODE_X_CRS3(X)  ((X &  OP_MASK_XCRS3) << OP_SH_XCRS3)
+#define ENCODE_X_CS(X)  ((X &  OP_MASK_XCS) << OP_SH_XCS)
+#define ENCODE_X_CSHAMT(X)  ((X &  OP_MASK_XCSHAMT) << OP_SH_XCSHAMT)
+#define ENCODE_X_IMM11(X)  ((X &  OP_MASK_XIMM11) << OP_SH_XIMM11)
+#define ENCODE_X_IMM11HI(X)  ((X &  OP_MASK_XIMM11HI) << OP_SH_XIMM11HI)
+#define ENCODE_X_IMM11LO(X)  ((X &  OP_MASK_XIMM11LO) << OP_SH_XIMM11LO)
+#define ENCODE_X_IMM5(X)  ((X &  OP_MASK_XIMM5) << OP_SH_XIMM5)
+#define ENCODE_X_LUT4(X)  ((X &  OP_MASK_XLUT4) << OP_SH_XLUT4)
+#define ENCODE_X_LUT8(X)  ((X &  OP_MASK_XLUT8) << OP_SH_XLUT8)
+#define ENCODE_X_RTAMT(X)  ((X &  OP_MASK_XRTAMT) << OP_SH_XRTAMT)
+#define EXTRACT_X_B0(X) ((X >> OP_SH_XB0)  & OP_MASK_XB0)
+#define EXTRACT_X_B1(X) ((X >> OP_SH_XB1)  & OP_MASK_XB1)
+#define EXTRACT_X_B2(X) ((X >> OP_SH_XB2)  & OP_MASK_XB2)
+#define EXTRACT_X_B3(X) ((X >> OP_SH_XB3)  & OP_MASK_XB3)
+#define EXTRACT_X_CA(X) ((X >> OP_SH_XCA)  & OP_MASK_XCA)
+#define EXTRACT_X_CB(X) ((X >> OP_SH_XCB)  & OP_MASK_XCB)
+#define EXTRACT_X_CC(X) ((X >> OP_SH_XCC)  & OP_MASK_XCC)
+#define EXTRACT_X_CD(X) ((X >> OP_SH_XCD)  & OP_MASK_XCD)
+#define EXTRACT_X_CL(X) ((X >> OP_SH_XCL)  & OP_MASK_XCL)
+#define EXTRACT_X_CMSHAMT(X) ((X >> OP_SH_XCMSHAMT)  & OP_MASK_XCMSHAMT)
+#define EXTRACT_X_CRD(X) ((X >> OP_SH_XCRD)  & OP_MASK_XCRD)
+#define EXTRACT_X_CRDM(X) ((X >> OP_SH_XCRDM)  & OP_MASK_XCRDM)
+#define EXTRACT_X_CRS1(X) ((X >> OP_SH_XCRS1)  & OP_MASK_XCRS1)
+#define EXTRACT_X_CRS2(X) ((X >> OP_SH_XCRS2)  & OP_MASK_XCRS2)
+#define EXTRACT_X_CRS3(X) ((X >> OP_SH_XCRS3)  & OP_MASK_XCRS3)
+#define EXTRACT_X_CS(X) ((X >> OP_SH_XCS)  & OP_MASK_XCS)
+#define EXTRACT_X_CSHAMT(X) ((X >> OP_SH_XCSHAMT)  & OP_MASK_XCSHAMT)
+#define EXTRACT_X_IMM11(X) ((X >> OP_SH_XIMM11)  & OP_MASK_XIMM11)
+#define EXTRACT_X_IMM11HI(X) ((X >> OP_SH_XIMM11HI)  & OP_MASK_XIMM11HI)
+#define EXTRACT_X_IMM11LO(X) ((X >> OP_SH_XIMM11LO)  & OP_MASK_XIMM11LO)
+#define EXTRACT_X_IMM5(X) ((X >> OP_SH_XIMM5)  & OP_MASK_XIMM5)
+#define EXTRACT_X_LUT4(X) ((X >> OP_SH_XLUT4)  & OP_MASK_XLUT4)
+#define EXTRACT_X_LUT8(X) ((X >> OP_SH_XLUT8)  & OP_MASK_XLUT8)
+#define EXTRACT_X_RTAMT(X) ((X >> OP_SH_XRTAMT)  & OP_MASK_XRTAMT)
+#define OP_MASK_XB0 0b11
+#define OP_MASK_XB1 0b11
+#define OP_MASK_XB2 0b11
+#define OP_MASK_XB3 0b11
+#define OP_MASK_XCA 0b1
+#define OP_MASK_XCB 0b1
+#define OP_MASK_XCC 0b1
+#define OP_MASK_XCD 0b1
+#define OP_MASK_XCL 0b1111
+#define OP_MASK_XCMSHAMT 0b111111
+#define OP_MASK_XCRD 0b1111
+#define OP_MASK_XCRDM 0b111
+#define OP_MASK_XCRS1 0b1111
+#define OP_MASK_XCRS2 0b1111
+#define OP_MASK_XCRS3 0b1111
+#define OP_MASK_XCS 0b1111
+#define OP_MASK_XCSHAMT 0b1111
+#define OP_MASK_XIMM11 0b11111111111
+#define OP_MASK_XIMM11HI 0b1111111
+#define OP_MASK_XIMM11LO 0b1111
+#define OP_MASK_XIMM5 0b11111
+#define OP_MASK_XLUT4 0b1111
+#define OP_MASK_XLUT8 0b11111111
+#define OP_SH_XB0 30
+#define OP_SH_XB1 28
+#define OP_SH_XB2 26
+#define OP_SH_XB3 24
+#define OP_SH_XCA 24
+#define OP_SH_XCB 19
+#define OP_SH_XCC 11
+#define OP_SH_XCD 20
+#define OP_SH_XCL 24
+#define OP_SH_XCMSHAMT 24
+#define OP_SH_XCRD 7
+#define OP_SH_XCRDM 7
+#define OP_SH_XCRS1 15
+#define OP_SH_XCRS2 20
+#define OP_SH_XCRS3 24
+#define OP_SH_XCS 28
+#define OP_SH_XCSHAMT 20
+#define OP_SH_XIMM11 21
+#define OP_SH_XIMM11HI 25
+#define OP_SH_XIMM11LO 7
+#define OP_SH_XIMM5 15
+#define OP_SH_XLUT4 25
+#define OP_SH_XLUT8 24
+#define VALIDATE_X_B0(X) ((ENCODE_X_B0(X)) == (EXTRACT_X_B0(X)))
+#define VALIDATE_X_B1(X) ((ENCODE_X_B1(X)) == (EXTRACT_X_B1(X)))
+#define VALIDATE_X_B2(X) ((ENCODE_X_B2(X)) == (EXTRACT_X_B2(X)))
+#define VALIDATE_X_B3(X) ((ENCODE_X_B3(X)) == (EXTRACT_X_B3(X)))
+#define VALIDATE_X_CA(X) ((ENCODE_X_CA(X)) == (EXTRACT_X_CA(X)))
+#define VALIDATE_X_CB(X) ((ENCODE_X_CB(X)) == (EXTRACT_X_CB(X)))
+#define VALIDATE_X_CC(X) ((ENCODE_X_CC(X)) == (EXTRACT_X_CC(X)))
+#define VALIDATE_X_CD(X) ((ENCODE_X_CD(X)) == (EXTRACT_X_CD(X)))
+#define VALIDATE_X_CL(X) ((ENCODE_X_CL(X)) == (EXTRACT_X_CL(X)))
+#define VALIDATE_X_CMSHAMT(X) ((ENCODE_X_CMSHAMT(X)) == (EXTRACT_X_CMSHAMT(X)))
+#define VALIDATE_X_CRD(X) ((ENCODE_X_CRD(X)) == (EXTRACT_X_CRD(X)))
+#define VALIDATE_X_CRDM(X) ((ENCODE_X_CRDM(X)) == (EXTRACT_X_CRDM(X)))
+#define VALIDATE_X_CRS1(X) ((ENCODE_X_CRS1(X)) == (EXTRACT_X_CRS1(X)))
+#define VALIDATE_X_CRS2(X) ((ENCODE_X_CRS2(X)) == (EXTRACT_X_CRS2(X)))
+#define VALIDATE_X_CRS3(X) ((ENCODE_X_CRS3(X)) == (EXTRACT_X_CRS3(X)))
+#define VALIDATE_X_CS(X) ((ENCODE_X_CS(X)) == (EXTRACT_X_CS(X)))
+#define VALIDATE_X_CSHAMT(X) ((ENCODE_X_CSHAMT(X)) == (EXTRACT_X_CSHAMT(X)))
+#define VALIDATE_X_IMM11(X) ((ENCODE_X_IMM11(X)) == (EXTRACT_X_IMM11(X)))
+#define VALIDATE_X_IMM11HI(X) ((ENCODE_X_IMM11HI(X)) == (EXTRACT_X_IMM11HI(X)))
+#define VALIDATE_X_IMM11LO(X) ((ENCODE_X_IMM11LO(X)) == (EXTRACT_X_IMM11LO(X)))
+#define VALIDATE_X_IMM5(X) ((ENCODE_X_IMM5(X)) == (EXTRACT_X_IMM5(X)))
+#define VALIDATE_X_LUT4(X) ((ENCODE_X_LUT4(X)) == (EXTRACT_X_LUT4(X)))
+#define VALIDATE_X_LUT8(X) ((ENCODE_X_LUT8(X)) == (EXTRACT_X_LUT8(X)))
+// ----- Crypto ISE END -------
+
 /* RV fields.  */
 
 #define OP_MASK_OP		0x7f
@@ -245,6 +365,7 @@ static const char * const riscv_pred_succ[16] =
 
 #define NGPR 32
 #define NFPR 32
+#define NCPR 16
 
 /* Replace bits MASK << SHIFT of STRUCT with the equivalent bits in
    VALUE << SHIFT.  VALUE is evaluated exactly once.  */
@@ -338,6 +459,7 @@ extern const char * const riscv_gpr_names_numeric[NGPR];
 extern const char * const riscv_gpr_names_abi[NGPR];
 extern const char * const riscv_fpr_names_numeric[NFPR];
 extern const char * const riscv_fpr_names_abi[NFPR];
+extern const char * const riscv_cpr_names_numeric[NCPR];
 
 extern const struct riscv_opcode riscv_opcodes[];
 
diff --git a/opcodes/riscv-dis.c b/opcodes/riscv-dis.c
index cc642d4ad3..a52789acd6 100644
--- a/opcodes/riscv-dis.c
+++ b/opcodes/riscv-dis.c
@@ -119,6 +119,12 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)
   int rs1 = (l >> OP_SH_RS1) & OP_MASK_RS1;
   int rd = (l >> OP_SH_RD) & OP_MASK_RD;
   fprintf_ftype print = info->fprintf_func;
+  char c;
+  int aux;
+  int lutval;
+  int lutlen;
+  int i;
+  char packwidth = 0xFF;
 
   if (*d != '\0')
     print (info->stream, "\t");
@@ -127,6 +133,96 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)
     {
       switch (*d)
 	{
+     case 'X':
+       switch (c = *++d){
+         case 'w': print(info->stream, "%d", (int)EXTRACT_X_B0(l)); break;
+         case 'x': print(info->stream, "%d", (int)EXTRACT_X_B1(l)); break;
+         case 'y': print(info->stream, "%d", (int)EXTRACT_X_B2(l)); break;
+         case 'z': print(info->stream, "%d", (int)EXTRACT_X_B3(l)); break;
+         case 'p':       /* ca cb cc */
+            aux = (EXTRACT_X_CA(l) << 2) |
+                  (EXTRACT_X_CB(l) << 1) |
+                  (EXTRACT_X_CC(l) << 0) ;
+            // Extract and print friendly pack width letter.
+            switch(aux) {
+                case 0 : print(info->stream,"w"); packwidth = 'w'; break;
+                case 4 : print(info->stream,"w"); packwidth = 'w'; break;
+                case 1 : print(info->stream,"h"); packwidth = 'h'; break;
+                case 2 : print(info->stream,"b"); packwidth = 'b'; break;
+                case 3 : print(info->stream,"n"); packwidth = 'n'; break;
+                default:
+                    print(info->stream,"?"); break;
+            }
+            break;
+         case 'a': print(info->stream, "%d", (int)EXTRACT_X_CA(l)); break;
+         case 'b': print(info->stream, "%d", (int)EXTRACT_X_CB(l)); break;
+         case 'c': print(info->stream, "%d", (int)EXTRACT_X_CC(l)); break;
+         case 'd': print(info->stream, "%d", (int)EXTRACT_X_CD(l)); break;
+         case 'L': print(info->stream, "%d", ((int)EXTRACT_X_CL(l))*2); break;
+         case 'r': print(info->stream, "%d", (int)EXTRACT_X_CMSHAMT(l)); break;
+         case 'D': print(info->stream, "c%d",(int)EXTRACT_X_CRD(l)); break;
+         case 'M': /* crdm */
+            aux = (int)EXTRACT_X_CRDM(l) << 1;
+            print(info -> stream, "c%d,c%d", aux, aux | 1);
+            break;
+         case 's': print(info->stream, "c%d",(int)EXTRACT_X_CRS1(l)); break;
+         case 't': print(info->stream, "c%d",(int)EXTRACT_X_CRS2(l)); break;
+         case 'S': print(info->stream, "c%d",(int)EXTRACT_X_CRS3(l)); break;
+         case 'k': print(info->stream, "%d", ((int)EXTRACT_X_CS(l))*2); break;
+         case 'R': 
+            if(packwidth == 'w') {
+                int shamt = EXTRACT_X_CSHAMT(l) | (((int)EXTRACT_X_CA(l)) << 4);
+                print(info->stream, "%d", shamt);
+            } else {
+            
+                print(info->stream, "%d", (int)EXTRACT_X_CSHAMT(l));
+
+            }
+            break;
+         case 'h': print(info->stream, "%d", (int)EXTRACT_X_CC(l));break;
+         case 'B': print(info->stream, "%d", (int)EXTRACT_X_CD(l));break;
+         case 'l': print(info->stream, "%d", (int)EXTRACT_X_IMM11(l));break;
+         case 'm':       /* imm11hi, imm11lo */
+            print(info->stream, "<IMM>");
+            break;
+         case 'n':      /* imm11lo */
+            print(info->stream, "<IMM>");
+            break;
+         case '5':       /* imm11 imm5 */
+            print(info->stream, "<IMM>");
+            break;
+         case '4': 
+         case '8': 
+
+            if(*d == '4') {
+                lutval = (int)EXTRACT_X_LUT4(l);
+                lutlen = 4;
+            } else if(*d == '8') {
+                lutval = (int)EXTRACT_X_LUT8(l);
+                lutlen = 8;
+            }
+            
+            print(info -> stream, "0b");
+            for(i = lutlen-1; i >= 0; i --) {
+                print(info->stream, "%d", (lutval >> i) &0x1);
+            }
+            break;
+	
+         case ',':
+	     case '(':
+	     case ')':
+	     case '[':
+	     case ']':
+	        print (info->stream, "%c", *d);
+	        break;
+     
+         default:
+            print(info -> stream, "Unknown XCrypto operand type `X%c'",c);
+            return;
+        }
+
+        break;
+
 	case 'C': /* RVC */
 	  switch (*++d)
 	    {
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index 79e7214835..4615caf7d9 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -56,6 +56,11 @@ const char * const riscv_fpr_names_abi[NFPR] = {
   "fs8", "fs9", "fs10", "fs11", "ft8", "ft9", "ft10", "ft11"
 };
 
+const char * const riscv_cpr_names_numeric[NCPR] = {
+  "c0",   "c1",   "c2",   "c3",   "c4",   "c5",   "c6",   "c7",
+  "c8",   "c9",   "c10",  "c11",  "c12",  "c13",  "c14",  "c15",
+};
+
 /* The order of overloaded instructions matters.  Label arguments and
    register arguments look the same. Instructions that can have either
    for arguments must apear in the correct order in this table for the
@@ -158,6 +163,78 @@ match_c_addi4spn (const struct riscv_opcode *op, insn_t insn)
 const struct riscv_opcode riscv_opcodes[] =
 {
 /* name,      isa,   operands, match, mask, match_func, pinfo.  */
+// ----- Crypto ISE BEGIN -----
+{"xc.xcr2gpr",  "x", "d,Xs",               MATCH_XCR2GPR, MASK_XCR2GPR, match_opcode, 0},
+{"xc.gpr2xcr",  "x", "XD,s",               MATCH_GPR2XCR, MASK_GPR2XCR, match_opcode, 0},
+{"xc.padd",     "x", "Xp,XD,Xs,Xt",  MATCH_PADD, MASK_PADD, match_opcode, 0},
+{"xc.psub",     "x", "Xp,XD,Xs,Xt",  MATCH_PSUB, MASK_PSUB, match_opcode, 0},
+{"xc.pmul.l",   "x", "Xp,XD,Xs,Xt",  MATCH_PMUL_L, MASK_PMUL_L, match_opcode, 0},
+{"xc.pmul.h",   "x", "Xp,XD,Xs,Xt",  MATCH_PMUL_H, MASK_PMUL_H, match_opcode, 0},
+{"xc.pclmul.l", "x", "Xp,XD,Xs,Xt",  MATCH_PCLMUL_L, MASK_PCLMUL_L, match_opcode, 0},
+{"xc.pclmul.h", "x", "Xp,XD,Xs,Xt",  MATCH_PCLMUL_H, MASK_PCLMUL_H, match_opcode, 0},
+{"xc.psll",     "x", "Xp,XD,Xs,Xt",  MATCH_PSLL, MASK_PSLL, match_opcode, 0},
+{"xc.psrl",     "x", "Xp,XD,Xs,Xt",  MATCH_PSRL, MASK_PSRL, match_opcode, 0},
+{"xc.prot",     "x", "Xp,XD,Xs,Xt",  MATCH_PROT, MASK_PROT, match_opcode, 0},
+{"xc.psll.i",   "x", "Xp,XD,Xs,XR",  MATCH_PSLL_I, MASK_PSLL_I, match_opcode, 0},
+{"xc.psrl.i",   "x", "Xp,XD,Xs,XR",  MATCH_PSRL_I, MASK_PSRL_I, match_opcode, 0},
+{"xc.prot.i",   "x", "Xp,XD,Xs,XR",  MATCH_PROT_I, MASK_PROT_I, match_opcode, 0},
+{"xc.rngseed",  "x", "Xs",                 MATCH_RNGSEED, MASK_RNGSEED, match_opcode, 0},
+{"xc.rngsamp",  "x", "XD",                 MATCH_RNGSAMP, MASK_RNGSAMP, match_opcode, 0},
+{"xc.rngtest",  "x", "d",                  MATCH_RNGTEST, MASK_RNGTEST, match_opcode, 0},
+{"xc.cmov.t",     "x", "XD,Xs,Xt",           MATCH_CMOV_T, MASK_CMOV_T, match_opcode, 0},
+{"xc.cmov.f",    "x", "XD,Xs,Xt",           MATCH_CMOV_F, MASK_CMOV_F, match_opcode, 0},
+{"xc.sha3.xy", "x", "d,s,t,Xw",           MATCH_SHA3_XY, MASK_SHA3_XY, match_opcode, 0},
+{"xc.sha3.x1", "x", "d,s,t,Xw",           MATCH_SHA3_X1, MASK_SHA3_X1, match_opcode, 0},
+{"xc.sha3.x2", "x", "d,s,t,Xw",           MATCH_SHA3_X2, MASK_SHA3_X2, match_opcode, 0},
+{"xc.sha3.x4", "x", "d,s,t,Xw",           MATCH_SHA3_X4, MASK_SHA3_X4, match_opcode, 0},
+{"xc.sha3.yx", "x", "d,s,t,Xw",           MATCH_SHA3_YX, MASK_SHA3_YX, match_opcode, 0},
+{"xc.aessub.enc"   , "x", "XD,Xs,Xt",  MATCH_AESSUB_ENC, MASK_AESSUB_ENC, match_opcode, 0},
+{"xc.aessub.encrot", "x", "XD,Xs,Xt",  MATCH_AESSUB_ENCROT, MASK_AESSUB_ENCROT, match_opcode, 0},
+{"xc.aessub.dec"   , "x", "XD,Xs,Xt",  MATCH_AESSUB_DEC, MASK_AESSUB_DEC, match_opcode, 0},
+{"xc.aessub.decrot", "x", "XD,Xs,Xt",  MATCH_AESSUB_DECROT, MASK_AESSUB_DECROT, match_opcode, 0},
+{"xc.aesmix.enc"   , "x", "XD,Xs,Xt",  MATCH_AESMIX_ENC, MASK_AESMIX_ENC, match_opcode, 0},
+{"xc.aesmix.dec"   , "x", "XD,Xs,Xt",  MATCH_AESMIX_DEC, MASK_AESMIX_DEC, match_opcode, 0},
+{"xc.scatter.b",  "x", "XD,Xt,s",            MATCH_SCATTER_B, MASK_SCATTER_B, match_opcode, 0},
+{"xc.gather.b",   "x", "XD,Xt,s",            MATCH_GATHER_B, MASK_GATHER_B, match_opcode, 0},
+{"xc.scatter.h",  "x", "XD,Xt,s",            MATCH_SCATTER_H, MASK_SCATTER_H, match_opcode, 0},
+{"xc.gather.h",   "x", "XD,Xt,s",            MATCH_GATHER_H, MASK_GATHER_H, match_opcode, 0},
+{"xc.mix.l",    "x", "XD,Xs,Xt,X4",        MATCH_MIX_L, MASK_MIX_L, match_opcode, 0},
+{"xc.mix.h",    "x", "XD,Xs,Xt,X4",        MATCH_MIX_H, MASK_MIX_H, match_opcode, 0},
+{"xc.bop",      "x", "XD,Xs,Xt,X8",        MATCH_BOP, MASK_BOP, match_opcode, 0},
+{"xc.mequ",     "x", "d,s,Xt,XS",          MATCH_MEQU, MASK_MEQU, match_opcode, 0},
+{"xc.mlte",     "x", "d,s,Xt,XS",          MATCH_MLTE, MASK_MLTE, match_opcode, 0},
+{"xc.mgte",     "x", "d,s,Xt,XS",          MATCH_MGTE, MASK_MGTE, match_opcode, 0},
+{"xc.lut",     "x", "XD,Xs,Xt,XS",         MATCH_LUT   , MASK_LUT   , match_opcode, 0},
+{"xc.madd.3",    "x", "(XM),Xs,Xt,XS",        MATCH_MADD_3, MASK_MADD_3, match_opcode, 0},
+{"xc.madd.2",    "x", "(XM),Xs,Xt",           MATCH_MADD_2, MASK_MADD_2, match_opcode, 0},
+{"xc.msub.3",    "x", "(XM),Xs,Xt,XS",        MATCH_MSUB_3, MASK_MSUB_3, match_opcode, 0},
+{"xc.msub.2",    "x", "(XM),Xs,Xt",           MATCH_MSUB_2, MASK_MSUB_2, match_opcode, 0},
+{"xc.msll.i",    "x", "(XM),Xs,Xt,Xr",        MATCH_MSLL_I, MASK_MSLL_I, match_opcode, 0},
+{"xc.msll",     "x", "(XM),Xs,Xt,XS",        MATCH_MSLL, MASK_MSLL, match_opcode, 0},
+{"xc.msrl.i",    "x", "(XM),Xs,Xt,Xr",        MATCH_MSRL_I, MASK_MSRL_I, match_opcode, 0},
+{"xc.msrl",     "x", "(XM),Xs,Xt,XS",        MATCH_MSRL, MASK_MSRL, match_opcode, 0},
+{"xc.macc.2",    "x", "(XM),Xs,Xt",           MATCH_MACC_2, MASK_MACC_2, match_opcode, 0},
+{"xc.macc.1",    "x", "(XM),Xs",              MATCH_MACC_1, MASK_MACC_1, match_opcode, 0},
+{"xc.mmul.3",     "x", "(XM),Xs,Xt,XS",        MATCH_MMUL_3, MASK_MMUL_3, match_opcode, 0},
+{"xc.mclmul.3",   "x", "(XM),Xs,Xt,XS",        MATCH_MCLMUL_3, MASK_MCLMUL_3, match_opcode, 0},
+{"xc.ld.bu",     "x", "XD,(Xh,Xd),Xl(s)",      MATCH_LD_BU, MASK_LD_BU, match_opcode, 0},
+{"xc.ld.hu",     "x", "XD,(Xh),Xl(s)",         MATCH_LD_HU, MASK_LD_HU, match_opcode, 0},
+{"xc.ld.w",      "x", "XD,Xl(s)",            MATCH_LD_W, MASK_LD_W, match_opcode, 0},
+{"xc.ld.hiu",     "x", "XD,X5",           MATCH_LD_HIU, MASK_LD_HIU, match_opcode, 0},
+{"xc.ld.liu",     "x", "XD,X5",           MATCH_LD_LIU, MASK_LD_LIU, match_opcode, 0},
+{"xc.pperm.w",     "x", "XD,Xs,Xw,Xx,Xy,Xz",  MATCH_PPERM_W, MASK_PPERM_W, match_opcode, 0},
+{"xc.pperm.h0",    "x", "XD,Xs,Xw,Xx,Xy,Xz",  MATCH_PPERM_H0, MASK_PPERM_H0, match_opcode, 0},
+{"xc.pperm.h1",    "x", "XD,Xs,Xw,Xx,Xy,Xz",  MATCH_PPERM_H1, MASK_PPERM_H1, match_opcode, 0},
+{"xc.pperm.b0",    "x", "XD,Xs,Xw,Xx,Xy,Xz",  MATCH_PPERM_B0, MASK_PPERM_B0, match_opcode, 0},
+{"xc.pperm.b1",    "x", "XD,Xs,Xw,Xx,Xy,Xz",  MATCH_PPERM_B1, MASK_PPERM_B1, match_opcode, 0},
+{"xc.pperm.b2",    "x", "XD,Xs,Xw,Xx,Xy,Xz",  MATCH_PPERM_B2, MASK_PPERM_B2, match_opcode, 0},
+{"xc.pperm.b3",    "x", "XD,Xs,Xw,Xx,Xy,Xz",  MATCH_PPERM_B3, MASK_PPERM_B3, match_opcode, 0},
+{"xc.ins",     "x", "XD,Xs,Xk,XL",        MATCH_INS, MASK_INS, match_opcode, 0},
+{"xc.ext",     "x", "XD,Xs,Xk,XL",        MATCH_EXT, MASK_EXT, match_opcode, 0},
+{"xc.st.b",      "x", "Xt,(Xh,XB),Xm(s)",   MATCH_ST_B, MASK_ST_B, match_opcode, 0},
+{"xc.st.h",      "x", "Xt,(Xh),Xm(s)",      MATCH_ST_H, MASK_ST_H, match_opcode, 0},
+{"xc.st.w",      "x", "Xt,Xm(s)",         MATCH_ST_W, MASK_ST_W, match_opcode, 0},
+// ----- Crypto ISE END -------
 {"unimp",     "C",   "",  0, 0xffffU,  match_opcode, 0 },
 {"unimp",     "I",   "",  MATCH_CSRRW | (CSR_CYCLE << OP_SH_CSR), 0xffffffffU,  match_opcode, 0 }, /* csrw cycle, x0 */
 {"ebreak",    "C",   "",  MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, INSN_ALIAS },
